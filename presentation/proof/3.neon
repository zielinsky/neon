data IntList =
| Nil
| Cons (x: Int) (tl: IntList)

fix append {xs : IntList} : IntList -> IntList =
  fun ys =>
    match xs with
    | Nil          -> ys
    | Cons(hd, tl) -> Cons(hd, append(tl, ys))

fix proof_append_nil {xs : IntList} : append(xs, Nil) == xs =
  match xs as xs return append(xs, Nil) == xs with
  | Nil          -> ?todo_nil
  | Cons(hd, tl) ->
    let ih = proof_append_nil(tl) in
    ?todo_cons
