data Option (A : Type) =
| None
| Some (x : A)

data List (A : Type) =
| Nil
| Cons (x : A) (tl : List(A))

fix list_nth_opt (A : Type) (n : Int) {xs : List(A)} : Option(A) =
    match xs with
    | Nil(A) -> None(A)
    | Cons(A, hd, tl) ->
        if (_builtin_int_eq(n, 0)) 
        then Some(A, hd)
        else list_nth_opt (A, (_builtin_int_sub(n, 1)), tl)

let list_filter (A : Type) (p : A -> Bool) (xs : List(A)) : List(A) =
    list_fold_left(A, List(A), fun acc x => if p(x) then list_cons(A, x, acc) else acc, Nil(A), xs)
