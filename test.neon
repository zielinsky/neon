data Option (A: Type) (P: (A -> Type)) =
| Some (x: A) (y: P(x))
| None

let y = fun (A: Type) (P: (A -> Type)) (x: A) (px: P(x)) => Some(A, P, x, px)

let depType (x: Int) = Int
let p (n: Int) = depType(n)

let z = Some(Int, p, 10, true)