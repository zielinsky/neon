data Option (A: Type) = 
| None
| Some (x: A)

data List (A: Type) = 
| Nil
| Cons (x: A) (tl: List(A))

let (*) = _builtin_mul

fix map {xs: List(Int)} : ((Int -> Int) -> (Int -> Int) -> Option(List(Int))) = 
  fun (f: Int -> Int) (g: Int -> Int) =>
    match xs with
    | Nil(A)              -> None(List(A))
    | Cons(A, elem, tail) -> Some(List(A), Cons(A, f(elem), 
      match map(tail)(f)(g) with
      | None(B)    -> Nil(A)
      | Some(B, x) -> x
    ))

let test = map(Cons(Int, 10, Cons(Int, 20, Nil(Int))))(fun (x: Int) => x * 15)(fun (x: Int) => x * 15)