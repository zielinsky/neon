data Option (A: Type) = 
| None
| Some (x: A)

data List (A: Type) = 
| Nil
| Cons (x: A) (tl: List(A))

fix map (A: Type) (f: A -> A) {xs: List(A)} : Option(List(A)) = 
    match xs with
    | Nil(A)              -> None(List(A))
    | Cons(A, elem, tail) -> Some(List(A), Cons(A, f(elem), 
      match map(A)(f)(Cons(Int, 42, Nil(Int))) with
      | None(B)    -> Nil(A)
      | Some(B, x) -> x
    ))

let test = map(Int)(fun (x: Int) => x * 15)(Cons(Int, 10, Cons(Int, 20, Nil(Int))))